plugins {
    id "com.github.node-gradle.node" version "3.3.0"
    id 'java'
    id 'java-library'
}

repositories {
    mavenCentral()
    maven { url 'https://s01.oss.sonatype.org/content/repositories/releases' }
    maven { url 'https://s01.oss.sonatype.org/content/repositories/snapshots/' }
    maven { url 'https://repo.spring.io/milestone' }
}

ext {
    springContext = '6.0.3'
    pf4j = '3.8.0'
    lombok = '1.18.24'
}



dependencies {
    compileOnly "org.springframework:spring-context:$springContext"
    compileOnly "org.pf4j:pf4j:$pf4j"
    compileOnly "io.projectreactor:reactor-core:3.5.1"
    compileOnly "org.springframework:spring-webflux:6.0.3"
    compileOnly "org.springdoc:springdoc-openapi-starter-webflux-api:2.0.2"
    compileOnly 'jakarta.annotation:jakarta.annotation-api:2.1.1'
    compileOnly 'org.springframework.retry:spring-retry:2.0.2'
    compileOnly files("lib/api-0.2.1.jar")


    testImplementation "org.springframework:spring-context:$springContext"
    testImplementation "org.pf4j:pf4j:$pf4j"
    testImplementation "io.projectreactor:reactor-core:3.5.1"
    testImplementation "org.springframework:spring-webflux:6.0.3"
    testImplementation "org.springdoc:springdoc-openapi-starter-webflux-api:2.0.2"
    testImplementation 'jakarta.annotation:jakarta.annotation-api:2.1.1'
    testImplementation 'org.springframework.retry:spring-retry:2.0.2'
    testImplementation files("lib/api-0.2.1.jar")

    // lombok
    compileOnly "org.projectlombok:lombok:$lombok"
    testCompileOnly "org.projectlombok:lombok:$lombok"
    annotationProcessor "org.projectlombok:lombok:$lombok"

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
    testImplementation 'org.assertj:assertj-core:3.24.2'
}

test {
    useJUnitPlatform()
}

node {
    nodeProjectDir = file("${project.projectDir}/console")
}

task buildFrontend(type: NpxTask) {
    command = 'pnpm'
    args = ['build']
}

task pnpmInstall(type: NpxTask) {
    command = "pnpm"
    args = ["install"]
}

build {
    // build frontend before build
    tasks.getByName('compileJava').dependsOn('buildFrontend')
    tasks.getByName("buildFrontend").dependsOn("pnpmInstall")
}